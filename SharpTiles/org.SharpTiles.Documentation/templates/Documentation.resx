<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="title_Overall" xml:space="preserve">
    <value>SharpTiles</value>
  </data>
  <data name="title_Sub" xml:space="preserve">
    <value>R.Z. Slijp, 2008</value>
  </data>
  <data name="source_Reference" xml:space="preserve">
    <value>The contents of this reference guide is based on the 'JSTL Quick Reference' by Bill Siggelkow(2003)</value>
  </data>
  <data name="copyright_Notice" xml:space="preserve">
    <value>This document is not copyright protected. However the 'JSTL Quick Reference', which forms the base of this document, is copyrighted by Bill Siggelkow.</value>
  </data>
  <data name="title_ExpressionLanguage" xml:space="preserve">
    <value>Expression language</value>
  </data>
  <data name="title_Functions" xml:space="preserve">
    <value>Functions</value>
  </data>
  <data name="title_Tags" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="required_False" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="required_True" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="title_ExpressionLanguage_AttributeValues" xml:space="preserve">
    <value>In Attribute Values</value>
  </data>
  <data name="description_ExpressionLanguage_AttributeValues" xml:space="preserve">
    <value>&lt;ul&gt;
	&lt;li&gt;&amp;lt;a:tag value="${{expr}}"/&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;a:tag value="me${{expr}} ${{expr}}"/&amp;gt;&lt;/li&gt;
  &lt;/ul&gt;</value>
  </data>
  <data name="title_ExpressionLanguage_BeanPropertyAccess" xml:space="preserve">
    <value>Bean Property Acces</value>
  </data>
  <data name="description_ExpressionLanguage_BeanPropertyAccess" xml:space="preserve">
    <value>bean.&lt;i&gt;name&lt;/i&gt;</value>
  </data>
  <data name="title_ExpressionLanguage_IndexedPropertyAccess" xml:space="preserve">
    <value>Indexed Property Access</value>
  </data>
  <data name="description_ExpressionLanguage_IndexedPropertyAccess" xml:space="preserve">
    <value>bean.property.&lt;i&gt;index&lt;/i&gt;</value>
  </data>
  <data name="title_ExpressionLanguage_MapPropertyAccess" xml:space="preserve">
    <value>Map Property Access</value>
  </data>
  <data name="description_ExpressionLanguage_MapPropertyAccess" xml:space="preserve">
    <value>bean.property.&lt;i&gt;key&lt;/i&gt;</value>
  </data>
  <data name="description_BooleanTernaryExpressionParser" xml:space="preserve">
    <value>&lt;i&gt;boolean expression&lt;/i&gt;?&lt;i&gt;expression evalulated when true&lt;/i&gt;:?&lt;i&gt;expression evalulated when false&lt;/i&gt;</value>
  </data>
  <data name="description_MathFunctionParser" xml:space="preserve">
    <value>&lt;i&gt;math function&lt;/i&gt;(&lt;i&gt;arg1&lt;,&lt;i&gt;arg2&lt;,...)</value>
  </data>
  <data name="description_PropertyOrConstantParser" xml:space="preserve">
    <value>Bean or Constant Access!</value>
  </data>
  <data name="description_RegExReplaceFunction" xml:space="preserve">
    <value>Regex Function!</value>
  </data>
  <data name="description_NowFunction" xml:space="preserve">
    <value>Now Function!</value>
  </data>
  <data name="expression_MathExpression" xml:space="preserve">
    <value>Math expression!</value>
  </data>
  <data name="tag_Header_Attribute" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="tag_Header_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="tag_Header_Required" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="description_Core_Out_Value" xml:space="preserve">
    <value>Data to output</value>
  </data>
  <data name="description_Core_Out_Default" xml:space="preserve">
    <value>Fallback data to output if value is empty</value>
  </data>
  <data name="description_Core_Out_EscapeXml" xml:space="preserve">
    <value>&lt;i&gt;true&lt;/i&gt; to escape special characters</value>
  </data>
  <data name="description_Core_Set_Value" xml:space="preserve">
    <value>Data to save No Body</value>
  </data>
  <data name="description_Core_Set_Property" xml:space="preserve">
    <value>Property of target to modify</value>
  </data>
  <data name="description_BaseCoreTagWithVariable_Var" xml:space="preserve">
    <value>Name of variable to store data. An existing variable will be changed. If the property is the property of an object(in any scope). The value of the property will be changed.</value>
  </data>
  <data name="description_BaseCoreTagWithVariable_Scope" xml:space="preserve">
    <value>Scope of variable</value>
  </data>
  <data name="description_BaseCoreTagWithOptionalVariable_Var" xml:space="preserve">
    <value>Name of variable to store data. An existing variable will be changed. If the property is the property of an object(in any scope). The value of the property will be changed.</value>
  </data>
  <data name="description_BaseUrlTagWithVariable_Scope" xml:space="preserve">
    <value>Scope of variable</value>
  </data>
  <data name="description_BaseUrlTagWithVariable_Var" xml:space="preserve">
    <value>Name of variable to store data. An existing variable will be changed. If the property is the property of an object(in any scope). The value of the property will be changed.</value>
  </data>
  <data name="description_BaseCoreTagWithOptionalVariable_Scope" xml:space="preserve">
    <value>Scope of variable</value>
  </data>
  <data name="description_Core_Remove_Var" xml:space="preserve">
    <value>Name of variable or property to delete. Deleting of properties is done by setting the value of properties to null.</value>
  </data>
  <data name="description_Core_Remove_Scope" xml:space="preserve">
    <value>Scope of variable.</value>
  </data>
  <data name="description_Core_Catch_Var" xml:space="preserve">
    <value>Name of variable to store data. An existing variable will be changed. If the property is the property of an object(in any scope). The value of the property will be changed.</value>
  </data>
  <data name="description_Core_Catch_Scope" xml:space="preserve">
    <value>Scope of variable.</value>
  </data>
  <data name="description_Core_If_Test" xml:space="preserve">
    <value>Condition to evaluate.</value>
  </data>
  <data name="description_Core_When_Test" xml:space="preserve">
    <value>Condition to evaluate.</value>
  </data>
  <data name="description_Core_ForEach_Items" xml:space="preserve">
    <value>Collection, iterator, map, or array to loop over.</value>
  </data>
  <data name="description_BaseIterationTag_Begin" xml:space="preserve">
    <value>Zero-based index of first item to process, inclusive.</value>
  </data>
  <data name="description_BaseIterationTag_End" xml:space="preserve">
    <value>Zero-based index of last item to process, inclusive.</value>
  </data>
  <data name="description_BaseIterationTag_Step" xml:space="preserve">
    <value>Process every stepth element (e.g 2 = every second element).</value>
  </data>
  <data name="description_BaseIterationTag_Var" xml:space="preserve">
    <value>Name of variable to hold the current item. This variable has only nested visibility.</value>
  </data>
  <data name="description_BaseIterationTag_VarStatus" xml:space="preserve">
    <value>Name of variable to hold the loop status with the following properties:
		   &lt;ul&gt;
				&lt;li&gt;index - position of the current item&lt;/li&gt;
				&lt;li&gt;count - number of times through the loop (starting with 1)&lt;/li&gt;
				&lt;li&gt;first - boolean indicator if this is the first iteration&lt;/li&gt;
				&lt;li&gt;last - boolean indicator if this is the last iteration&lt;/li&gt;
			&lt;/ul&gt;
	</value>
  </data>
  <data name="description_Core_ForTokens_Items" xml:space="preserve">
    <value>String of tokens to loop over.</value>
  </data>
  <data name="description_Core_ForTokens_Delims" xml:space="preserve">
    <value>Set of characters that separate the tokens (e.g. delims=",;" will tokenize a string separated by commas or semi-colons).</value>
  </data>
  <data name="description_Core_Url_Value" xml:space="preserve">
    <value>URL to be processed.</value>
  </data>
  <data name="description_Core_Import_Url" xml:space="preserve">
    <value>URL of the resource to import.</value>
  </data>
  <data name="description_Core_Redirect_Url" xml:space="preserve">
    <value>URL of the resource to redirect to.</value>
  </data>
  <data name="description_Core_Param_Name" xml:space="preserve">
    <value>Name of the query string parameter.</value>
  </data>
  <data name="description_Core_Param_Value" xml:space="preserve">
    <value>Value of the parameter. If not specified, value is taken from the tag body.</value>
  </data>
  <data name="description_Format_SetLocale_Value" xml:space="preserve">
    <value>String representation of a locale (e.g. en-US) or an actual java.util.Locale object.</value>
  </data>
  <data name="description_Format_SetLocale_Scope" xml:space="preserve">
    <value>Scope to set the default locale for.</value>
  </data>
  <data name="description_Format_Bundle_BaseName" xml:space="preserve">
    <value>Fully-qualified name of the base bundle without a file type (such as ".resx").</value>
  </data>
  <data name="description_Format_Bundle_Prefix" xml:space="preserve">
    <value>String prefix to be prepended to the value of the message key. Note that the prefix must include all characters – a separator character (e.g. ".") is not assumed.</value>
  </data>
  <data name="description_Format_SetBundle_BaseName" xml:space="preserve">
    <value>Fully-qualified name of the base bundle without a file type (such as ".properties").</value>
  </data>
  <data name="description_Format_Message_Key" xml:space="preserve">
    <value>Message key to be looked up.</value>
  </data>
  <data name="description_Format_Message_Bundle" xml:space="preserve">
    <value>Localization context (set by prio configuration, &amp;lt;fmt:bundle&amp;gt;, or &amp;lt;fmt:setBundle&amp;gt;, which specifies the resource bundle the message key is to be looked up in.</value>
  </data>
  <data name="description_Format_Param_Value" xml:space="preserve">
    <value>Value used for parametric message format substitution.</value>
  </data>
  <data name="description_Format_RequestEncoding_Value" xml:space="preserve">
    <value>Character encoding (e.g. "UTF-8") to use.</value>
  </data>
  <data name="description_Format_FormatNumber_Value" xml:space="preserve">
    <value>Numeric value to format.</value>
  </data>
  <data name="description_Format_FormatNumber_Type" xml:space="preserve">
    <value>Specifies the type of value. Valid values are:
	</value>
  </data>
  <data name="description_Format_FormatNumber_Pattern" xml:space="preserve">
    <value>Custom formatting pattern (overrides other formatting options including type - see System.Globalization.NumberFormatInfo)</value>
  </data>
  <data name="description_Format_FormatNumber_CurrencyCode" xml:space="preserve">
    <value>Currency code (ISO 4217) used for formatting currencies. Such as "USD" (US dollars) or "EUR" (euro).</value>
  </data>
  <data name="description_Format_FormatNumber_CurrencySymbol" xml:space="preserve">
    <value>Currency symbol used when formatting currencies. Such as "$" for US dollars, or "F" for Francs.</value>
  </data>
  <data name="description_Format_FormatNumber_GroupingUsed" xml:space="preserve">
    <value>Specifies if grouping separators will be used (for example - formatting "23890" as "23,890").</value>
  </data>
  <data name="description_Format_FormatNumber_MinFractionDigits" xml:space="preserve">
    <value>Maximum number of digits to print in the fractional part of the number.</value>
  </data>
  <data name="description_Format_FormatNumber_MaxFractionDigits" xml:space="preserve">
    <value>Minimum number of digits to print in the fractional part of the number.</value>
  </data>
  <data name="description_Format_FormatNumber_MinIntegerDigits" xml:space="preserve">
    <value>Maximum number of digits to print in the integer part of the number.</value>
  </data>
  <data name="description_Format_FormatNumber_MaxIntegerDigits" xml:space="preserve">
    <value>Minimum number of digits to print in the integer part of the number.</value>
  </data>
  <data name="description_Format_ParseNumber_Value" xml:space="preserve">
    <value>Value to parse.</value>
  </data>
  <data name="description_Format_ParseNumber_Type" xml:space="preserve">
    <value>Specifies the type of value. Valid values are:
	</value>
  </data>
  <data name="description_Format_ParseNumber_Styles" xml:space="preserve">
    <value>Specifies the number style of value as "," seperated list. Valid values are String representation of System.Globalization.NumberStyles:		
	</value>
  </data>
  <data name="description_Format_ParseNumber_ParseLocale" xml:space="preserve">
    <value>String representation of a locale (e.g. en_US) or an actual System.Globalization.CultureInfo object used for parsing.</value>
  </data>
  <data name="description_Format_ParseNumber_IntegerOnly" xml:space="preserve">
    <value>Specifies if only the integer portion of the value should be parsed.</value>
  </data>
  <data name="description_Format_FormatDate_Value" xml:space="preserve">
    <value>Date value to format. Value must be a System.Date object or String representation.</value>
  </data>
  <data name="description_BaseDateTag_Type" xml:space="preserve">
    <value>Specifies the type of value. Valid values are:</value>
  </data>
  <data name="description_BaseDateTag_DateStyle" xml:space="preserve">
    <value>Predefined formatting style for a date (ignored if type="time") - see System.Globalization.DateTimeFormatInfo</value>
  </data>
  <data name="description_BaseDateTag_TimeStyle" xml:space="preserve">
    <value>Predefined formatting style for a time (ignored if type="date") - see System.Globalization.DateTimeFormatInfo. Valid values are:</value>
  </data>
  <data name="description_BaseDateTag_Pattern" xml:space="preserve">
    <value>Custom formatting style (overrides type, dateStyle, and timeStyle) - see System.Globalization.DateTimeFormatInfo.</value>
  </data>
  <data name="description_Format_ParseDate_Value" xml:space="preserve">
    <value>Date/time string to parse.</value>
  </data>
  <data name="description_Format_ParseDate_ParseLocale" xml:space="preserve">
    <value>String representation of a locale (e.g. en_US) or an actual System.Globalization.CultureInfo object used for parsing.</value>
  </data>
  <data name="description_Format_ParseDate_Exact" xml:space="preserve">
    <value>Forces the date parser to do an exact parse.</value>
  </data>
  <data name="description_Xml_Parse_Doc" xml:space="preserve">
    <value>Text of the document to a parse as a String or Reader</value>
  </data>
  <data name="description_Xml_Out_Source" xml:space="preserve">
    <value>Var containing DOM model where the XPath expression is run over.</value>
  </data>
  <data name="description_Xml_Out_Select" xml:space="preserve">
    <value>XPath expression.</value>
  </data>
  <data name="description_Xml_Out_EscapeXml" xml:space="preserve">
    <value>true to escape special characters</value>
  </data>
  <data name="description_Xml_Set_Source" xml:space="preserve">
    <value>Var containing DOM model where the XPath expression is run over.</value>
  </data>
  <data name="description_Xml_Set_Select" xml:space="preserve">
    <value>XPath expression.</value>
  </data>
  <data name="description_Xml_If_Source" xml:space="preserve">
    <value>Var containing DOM model where the XPath expression is run over.</value>
  </data>
  <data name="description_Xml_If_Select" xml:space="preserve">
    <value>XPath expression.</value>
  </data>
  <data name="description_Xml_When_Source" xml:space="preserve">
    <value>Var containing DOM model where the XPath expression is run over.</value>
  </data>
  <data name="description_Xml_When_Select" xml:space="preserve">
    <value>XPath expression.</value>
  </data>
  <data name="description_Xml_ForEach_Source" xml:space="preserve">
    <value>Var containing DOM model where the XPath expression is run over.</value>
  </data>
  <data name="description_Xml_ForEach_Select" xml:space="preserve">
    <value>XPath expression.</value>
  </data>
  <data name="description_Xml_Transform_Doc" xml:space="preserve">
    <value>Source XML document for the transformation. Value can be a String, Stream, TextReader, XmlReader, System.Xml.XPath.XPathDocument or any value exported &amp;lt;x:parse&amp;gt; or &amp;lt;x:set&amp;gt;.</value>
  </data>
  <data name="description_Xml_Transform_CacheVar" xml:space="preserve">
    <value>Var to save a cached instance of the parsed xsl template in.</value>
  </data>
  <data name="description_Xml_Transform_CacheScope" xml:space="preserve">
    <value>Scope of the cached instance.</value>
  </data>
  <data name="description_Xml_Transform_Xslt" xml:space="preserve">
    <value>XSLT stylesheet to use. The value must be String, Stream, TextReader, XmlReader, System.Xml.XPath.XPathDocument or any value exported &amp;lt;x:parse&amp;gt; or &amp;lt;x:set&amp;gt;.</value>
  </data>
  <data name="description_Xml_Param_Name" xml:space="preserve">
    <value>Name of the parameter as a String. This name must match the name in the corresponding &amp;lt;xsl:param&amp;gt; XSLT tag.</value>
  </data>
  <data name="description_Xml_Param_Value" xml:space="preserve">
    <value>Value of the parameter. If not specified, value is taken from the tag body.</value>
  </data>
  <data name="description_Xml_Param_NameSpaceUri" xml:space="preserve">
    <value>Namespace uri used in the &lt;xsl:param&gt;</value>
  </data>
  <data name="description_Sharp_Marker_Id" xml:space="preserve">
    <value>Marker Id which will return in the output</value>
  </data>
  <data name="description_Sharp_Include_File" xml:space="preserve">
    <value>Includes the template into current template</value>
  </data>
  <data name="description_Core_Title" xml:space="preserve">
    <value>Core &lt;i&gt;Tag Library&lt;/i&gt;</value>
  </data>
  <data name="description_Format_Title" xml:space="preserve">
    <value>Formatting  &lt;i&gt;Tag Library&lt;/i&gt;</value>
  </data>
  <data name="description_Xml_Title" xml:space="preserve">
    <value>XML &lt;i&gt;Tag Library&lt;/i&gt;</value>
  </data>
  <data name="description_Sharp_Title" xml:space="preserve">
    <value>Sharp &lt;i&gt;Tag Library&lt;/i&gt;</value>
  </data>
  <data name="description_Core" xml:space="preserve">
    <value>The core tag lib provides basic functionality for page flow, rendering and handling variables.</value>
  </data>
  <data name="description_Core_GeneralPurpose" xml:space="preserve">
    <value>&lt;h3&gt;General-Purpose Actions&lt;/h3&gt;&lt;br/&gt;Actions for rendering data, creating and modifying scoped variables, and catching exceptions.</value>
  </data>
  <data name="description_Core_Conditional" xml:space="preserve">
    <value>&lt;h3&gt;Conditional Actions&lt;/h3&gt;&lt;br/&gt;Actions for processing markup based on logical conditions.</value>
  </data>
  <data name="description_Core_Iterator" xml:space="preserve">
    <value>&lt;h3&gt;Iterator Actions&lt;/h3&gt;&lt;br/&gt;Actions that loop over collections, for a fixed number of times, or over a set of string tokens. These actions share a lot of the same attributes for iterating over a subset of elements.</value>
  </data>
  <data name="description_Core_URLRelated" xml:space="preserve">
    <value>&lt;h3&gt;URL Related Actions&lt;/h3&gt;&lt;br/&gt;Actions for importing content from URLs, building URLs, and redirecting.</value>
  </data>
  <data name="description_Format" xml:space="preserve">
    <value>The formatting tag lib handles the translations, character setsand the parsing and formatting of numbers and dates</value>
  </data>
  <data name="description_Format_Internationalization" xml:space="preserve">
    <value>&lt;h3&gt;Internationalization (I18N) Actions&lt;/h3&gt;&lt;br/&gt;Actions that establish localization (l10n) contexts, specify resource bundles, and format messages. </value>
  </data>
  <data name="description_Format_Formatting" xml:space="preserve">
    <value>&lt;h3&gt;Internationalization (I18N) Actions&lt;/h3&gt;&lt;br/&gt;Actions that format and parse numbers, currencies, percentages, dates and times.</value>
  </data>
  <data name="description_Xml" xml:space="preserve">
    <value>The XML tag library supports parsing of XML documents, selection of XML fragments, conditional and iterative processing based on XML content, and
			XSLT transformations. A common pattern for using the XML tags is as follows:
			&lt;ol&gt;
				&lt;li&gt;Use &lt;i&gt;&amp;lt;x:parse&amp;gt;&lt;/i&gt; to parse XML into a scoped variable. The XML can come from the body literally, from the body via &lt;i&gt;&amp;lt;c:import&amp;gt;&lt;/i&gt;, or from the 
				value attribute which may refer to any XML source. &lt;i&gt;&amp;lt;x:parse var="varName" ...&amp;gt;&lt;/i&gt;
				&lt;/li&gt;
				&lt;li&gt;Use the scoped variable from  &lt;i&gt;&amp;lt;x:parse&amp;gt;&lt;/i&gt; to specify the XML document to use in XPath expressions. &lt;i&gt;&amp;lt;x:out source="${{varName}}" select="XPathexpression"/&amp;gt;&lt;/i&gt;
				    The following example demonstrates the above techniques.
				&lt;/li&gt;
			&lt;/ol&gt;
	</value>
  </data>
  <data name="description_Xml_XMLActions" xml:space="preserve">
    <value>&lt;h3&gt;General-Purpose Actions&lt;/h3&gt;&lt;br/&gt;Actions for parsing XML, outputting to the page, and selecting XML fragments. The examples that follow
demonstrate use of the XML tags for processing Rich Site Summary (RSS) feeds. RSS has more or less the following format:</value>
  </data>
  <data name="description_Xml_Conditional" xml:space="preserve">
    <value>&lt;h3&gt;Conditional Actions&lt;/h3&gt;&lt;br/&gt;Actions that format and parse numbers, currencies, percentages, dates and times.</value>
  </data>
  <data name="description_Xml_Iterator" xml:space="preserve">
    <value>&lt;h3&gt;Iterator Actions&lt;/h3&gt;&lt;br/&gt;Actions that format and parse numbers, currencies, percentages, dates and times.</value>
  </data>
  <data name="description_Xml_Transformation" xml:space="preserve">
    <value>&lt;h3&gt;Transformation Actions&lt;/h3&gt;&lt;br/&gt;JSTL provides an &lt;i&gt;&amp;lt;x:transform&amp;gt;&lt;/i&gt; tag for performing XSLT transformations. The &lt;i&gt;&amp;lt;x:param&amp;gt;&lt;/i&gt; tag can be nested in the &lt;i&gt;&amp;lt;x:transform&amp;gt;&lt;/i&gt; tag to set a parameter that is used in the stylesheet.</value>
  </data>
  <data name="description_Sharp" xml:space="preserve">
    <value>&lt;h3&gt;Sharp Actions&lt;/h3&gt;&lt;br/&gt;Miscelanious actions.</value>
  </data>
  <data name="description_Core_Out" xml:space="preserve">
    <value>renders data to the page</value>
  </data>
  <data name="description_Core_Set" xml:space="preserve">
    <value>saves data to a scoped variable</value>
  </data>
  <data name="description_Core_Remove" xml:space="preserve">
    <value>deletes a scoped variable</value>
  </data>
  <data name="description_Core_Catch" xml:space="preserve">
    <value>traps all exceptions or errors from the enclosed body.</value>
  </data>
  <data name="description_Core_If" xml:space="preserve">
    <value>processes the body if test is true</value>
  </data>
  <data name="description_Core_Choose" xml:space="preserve">
    <value>multiple conditions - processes the body of the &lt;b&gt;first&lt;/b&gt; enclosed &lt;i&gt;when&lt;/i&gt; tag where the test 
   condition is true. If none match then the body of the &lt;i&gt;otherwise&lt;/i&gt; tag (if present) is processed.</value>
  </data>
  <data name="description_Core_When" xml:space="preserve">
    <value>processes the body if test is true and no
other previous &lt;i&gt;&amp;lt;c:when&amp;gt;&lt;/i&gt; tags evaluated to true.</value>
  </data>
  <data name="description_Core_Otherwise" xml:space="preserve">
    <value>processes the body if no other previous &lt;i&gt;&amp;lt;c:when&amp;gt;&lt;/i&gt; condition was matched. This tag accepts no attributes and, if present, must be the 
   last tag in the &lt;i&gt;&amp;lt;c:choose&amp;gt;&lt;/i&gt; body.</value>
  </data>
  <data name="description_Core_ForEach" xml:space="preserve">
    <value>repeats the nested body content over a collection or for a fixed number of times.</value>
  </data>
  <data name="description_Core_ForTokens" xml:space="preserve">
    <value>repeats the nested body content for each token of a delimited string.</value>
  </data>
  <data name="description_Core_Import" xml:space="preserve">
    <value>imports the content of a URL-based resource. Action may include nested &lt;i&gt;&amp;lt;c:param&amp;gt;&lt;/i&gt; tags to specify the query string (unless the varReader  attribute is specified).</value>
  </data>
  <data name="description_Core_Url" xml:space="preserve">
    <value>builds a URL with the proper rewriting rules applied (only relative URLs are rewritten). Action may include nested &lt;i&gt;&amp;lt;c:param&amp;gt;&lt;/i&gt; tags to specify the query string.</value>
  </data>
  <data name="description_Core_Redirect" xml:space="preserve">
    <value>sends the client a response to redirect to the specified URL. This action will abort processing of the current page. Action may include nested &lt;i&gt;&amp;lt;c:param&amp;gt;&lt;/i&gt; tags to specify the query string.</value>
  </data>
  <data name="description_Core_Param" xml:space="preserve">
    <value>adds request parameters to a URL. This action can only be nested within &lt;i&gt;&amp;lt;c:import&amp;gt;&lt;/i&gt;, &lt;i&gt;&amp;lt;c:url&amp;gt;&lt;/i&gt;, or &lt;i&gt;&amp;lt;c:redirect&amp;gt;&lt;/i&gt;.</value>
  </data>
  <data name="description_Format_SetLocale" xml:space="preserve">
    <value>Sets the default locale for the specified scope. This will override the browserbased locale.</value>
  </data>
  <data name="description_Format_RequestEncoding" xml:space="preserve">
    <value>Instructs JSTL to use a specific character encoding (see &lt;a href="http://www.iana.org/assignments/character-sets"&gt;http://www.iana.org/assignments/character-sets&lt;/a&gt;) to decode request parameters. Omitting a value indicates to use automatic detection of the proper encoding.</value>
  </data>
  <data name="description_Format_Bundle" xml:space="preserve">
    <value>Sets the localization context, based on the specified resource bundle, to be used within the body content of this tag.</value>
  </data>
  <data name="description_Format_SetBundle" xml:space="preserve">
    <value>Creates and stores in a scoped variable, a localization context based on the specified resource bundle.</value>
  </data>
  <data name="description_Format_Message" xml:space="preserve">
    <value>Looks up a localized message in a resource bundle. This tag can contain nested &lt;i&gt;&amp;lt;fmt:param&amp;gt;&lt;/i&gt; tags to specify message format substitution values. The resultant message is printed or stored in a scoped variable.</value>
  </data>
  <data name="description_Format_Param" xml:space="preserve">
    <value>Supplies a parameter for message  format substitution in a containing &lt;i&gt;&amp;lt;fmt:message&amp;gt;&lt;/i&gt; tag. Parameters are substituted in sequential order.</value>
  </data>
  <data name="description_Format_FormatNumber" xml:space="preserve">
    <value>Formats a number, currency, or percentage in a locale-sensitive manner. The formatted value is printed or stored in a scoped variable.</value>
  </data>
  <data name="description_Format_ParseNumber" xml:space="preserve">
    <value>Parses a String representing a number, currency, or percentage in a localesensitive manner. The parsed value is printed or stored in a scoped variable.</value>
  </data>
  <data name="description_Format_FormatDate" xml:space="preserve">
    <value>Formats a date and/or time in a locale-sensitive manner. The formatted value is printed or stored in a scoped variable.</value>
  </data>
  <data name="description_Format_ParseDate" xml:space="preserve">
    <value>Parses a string representing a date and/or time in a locale-sensitive manner. The parsed value is printed or stored in a scoped variable.</value>
  </data>
  <data name="description_Xml_Parse" xml:space="preserve">
    <value>Parses XML content, provided by the value attribute or the tags body, into a scoped variable(s). This variable can then be used for subsequent processing by other XML tags.</value>
  </data>
  <data name="description_Xml_Out" xml:space="preserve">
    <value>Prints the result of the XPath expression as a string.</value>
  </data>
  <data name="description_Xml_Set" xml:space="preserve">
    <value>Saves the result of the select XPath expression to a scoped variable. Returned value may be a node set (XML fragment), boolean, string, or number.</value>
  </data>
  <data name="description_Xml_If" xml:space="preserve">
    <value>Processes the body if select XPath evaluates to true (following the rules of the boolean() XPath function).</value>
  </data>
  <data name="description_Xml_Choose" xml:space="preserve">
    <value>Processes the body of the &lt;b&gt;first&lt;/b&gt; enclosed &lt;i&gt;&amp;lt;x:when&amp;gt;&lt;/i&gt; tag where the select XPath expression evaluates to true. If none match then the body of the &lt;i&gt;&amp;lt;x:otherwise&amp;gt;&lt;/i&gt; tag (if present)
is processed.</value>
  </data>
  <data name="description_Xml_When" xml:space="preserve">
    <value>Represents an alternative in an &lt;i&gt;&amp;lt;x:choose&amp;gt;&lt;/i&gt; tag. Processes the body if the select expression evaluates to true and no other previous &lt;i&gt;&amp;lt;x:when&amp;gt;&lt;/i&gt; tags in the &lt;i&gt;&amp;lt;x:choose&amp;gt;&lt;/i&gt;
matched.</value>
  </data>
  <data name="description_Xml_Otherwise" xml:space="preserve">
    <value>Processes the body if no other previous &lt;i&gt;&amp;lt;x:when&amp;gt;&lt;/i&gt; condition in the &lt;i&gt;&amp;lt;x:choose&amp;gt;&lt;/i&gt; matched. This tag accepts no attributes and, if present, must be the last tag in
&lt;i&gt;&amp;lt;x:choose&amp;gt;&lt;/i&gt; body.</value>
  </data>
  <data name="description_Xml_ForEach" xml:space="preserve">
    <value>Repeats the nested body content over a node set determined by an XPath expression, setting the context node to each element in the iteration.</value>
  </data>
  <data name="description_Xml_Transform" xml:space="preserve">
    <value>Conducts an XSLT transformation on source XML. The source XML is provided by the doc attribute or the body of the tag. The XSL stylesheet is specified by the  &lt;i&gt;xslt&lt;/i&gt; attribute. While in most cases, the stylesheet will be set up by back-end code - it is possible to define the stylesheet inline and make it available with &lt;i&gt;&amp;lt;c:set&amp;gt;&lt;/i&gt; as in the
following example:</value>
  </data>
  <data name="description_Xml_Param" xml:space="preserve">
    <value>Sets a transformation parameter that will be passed to stylesheet which declares parameters using the &lt;i&gt;&amp;lt;xsl:param&amp;gt;&lt;/i&gt; tag. 
   The &lt;i&gt;&amp;lt;x:param&amp;gt;&lt;/i&gt; tag can only be nested within an &lt;i&gt;&amp;lt;x:transform&amp;gt;&lt;/i&gt; tag. Any &lt;i&gt;&amp;lt;x:param&amp;gt;&lt;/i&gt;
   tags must come after the XML body content of the &lt;i&gt;&amp;lt;x:transform&amp;gt;&lt;/i&gt; tag, if present.</value>
  </data>
  <data name="description_Sharp_Marker" xml:space="preserve">
    <value>Marks the nested body. The body is included inside a &lt;i&gt;&amp;lt;div&amp;gt;&lt;/i&gt; element.</value>
  </data>
  <data name="description_Sharp_Include" xml:space="preserve">
    <value>Includes and evaluates a fragment.</value>
  </data>
  <data name="description_Core_Out_Example" xml:space="preserve">
    <value>&amp;lt;h2&amp;gt;Welcome, &amp;lt;c:out value="${{user.name}}" default="Guest"/&amp;gt;&amp;lt;/h2&amp;gt;</value>
  </data>
  <data name="description_Core_Set_Example" xml:space="preserve">
    <value>&amp;lt;c:set var="dogAge" value="${{age div 7}}"/&amp;gt; You are &amp;lt;c:out value="${{dogAge}}"/&amp;gt; in dog years.</value>
  </data>
  <data name="description_Core_Remove_Example" xml:space="preserve">
    <value>&amp;lt;c:remove var="dogAge" scope="page"/&amp;gt;</value>
  </data>
  <data name="description_Core_Catch_Example" xml:space="preserve">
    <value>&amp;lt;c:catch var="err"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:import value="http://www.sharptiles.org"/&amp;gt;&lt;br/&gt;
&amp;lt;/c:catch&amp;gt;&lt;br/&gt;
&amp;lt;c:if test="${{not empty err}}"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Could not connect to Sharptiles web site.&lt;br/&gt;
&amp;lt;/c:if&amp;gt;&lt;br/&gt;</value>
  </data>
  <data name="description_Core_If_Example" xml:space="preserve">
    <value>&amp;lt;c:if test="${{user.age ge '40'}}"&amp;gt; You are over the hill. &amp;lt;/c:if&amp;gt;</value>
  </data>
  <data name="description_Format_SetLocale_Example" xml:space="preserve">
    <value>&amp;lt;fmt:setLocale scope="session" value="fr-CA"/&amp;gt;</value>
  </data>
  <data name="description_Format_RequestEncoding_Example" xml:space="preserve">
    <value>&amp;lt;fmt:requestEncoding key="UTF-7"/&amp;gt;</value>
  </data>
  <data name="description_Format_Bundle_Example" xml:space="preserve">
    <value>&lt;b&gt;&amp;lt;fmt:bundle baseName="resources" prefix="label."&amp;gt;&lt;/b&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;fmt:message key="userId"/&amp;gt;&lt;br/&gt;
&lt;b&gt;&amp;lt;fmt:bundle&amp;gt;&lt;/b&gt;&lt;br/&gt;
  </value>
  </data>
  <data name="description_Format_SetBundle_Example" xml:space="preserve">
    <value>&amp;lt;fmt:setBundle baseName="ApplicationResources" var="tilesMessages" scope="Application"/&amp;gt;</value>
  </data>
  <data name="description_Format_Message_Example" xml:space="preserve">
    <value>&amp;lt;fmt:message key="title" bundle="${{tilesMessages}}"/&amp;gt;</value>
  </data>
  <data name="description_Format_FormatNumber_Example" xml:space="preserve">
    <value>&amp;lt;fmt:formatNumber type="Currency" value="3.977"&amp;gt;</value>
  </data>
  <data name="description_Format_ParseNumber_Example" xml:space="preserve">
    <value>&lt;b&gt;&amp;lt;fmt:parseNumber var="num" type="Number" Styles="AllowDecimalPoint,AllowThousands" value="2,447"/&amp;gt;&lt;/b&gt;&lt;br/&gt;&amp;lt;c:out value="${{num}}"/&amp;gt;</value>
  </data>
  <data name="description_Format_FormatDate_Example" xml:space="preserve">
    <value>&amp;lt;fmt:formatDate value="${{now}}" pattern="yy-MMM-dd&amp;gt;"/&gt;</value>
  </data>
  <data name="description_Format_ParseDate_Example" xml:space="preserve">
    <value>&lt;b&gt;&amp;lt;fmt:parseDate var="bday" pattern="MM/dd/yy" value="05/10/63"/&amp;gt;&lt;/b&gt;&lt;br/&gt;&amp;lt;fmt:formatDate value="${{bday}}" dateStyle="Long"/&amp;gt;</value>
  </data>
  <data name="description_Core_Choose_Example" xml:space="preserve">
    <value>&amp;lt;c:choose&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:when test="${{a boolean expr}}"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// do something&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/c:when&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:when test="${{another boolean expr}}"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// do something else&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/c:when&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:otherwise&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// do this when nothing else is true&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/c:otherwise&amp;gt;&lt;br/&gt;
&amp;lt;/c:choose&amp;gt;</value>
  </data>
  <data name="description_Xml_Parse_Example" xml:space="preserve">
    <value>&amp;lt;c:import var="rss" url="http://news.google.com/?output=rss"/&amp;gt;&lt;br/&gt;
&lt;b&gt;&amp;lt;x:parse var="news" xml="${{rss}}"/&amp;gt;&lt;/b&gt;</value>
  </data>
  <data name="description_Xml_Out_Example" xml:space="preserve">
    <value>&amp;lt;x:out source="${{news}}" select="//channel/title"/&amp;gt;</value>
  </data>
  <data name="description_Xml_Set_Example" xml:space="preserve">
    <value>&amp;lt;x:set source="${{news}}" select="//channel/item"
var="newsItems"/&amp;gt;</value>
  </data>
  <data name="description_Xml_If_Example" xml:space="preserve">
    <value>&amp;lt;x:if source="${{news}}" select="item[contains(description,'Linux')]"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux is in the news today!&lt;br/&gt;
&amp;lt;/x:if&amp;gt;</value>
  </data>
  <data name="description_Xml_Choose_Example" xml:space="preserve">
    <value>&amp;lt;x:choose&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;x:when source="${{news}}" select="//item"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;We've got news :)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/x:when&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;x:otherwise&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;No news today :(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/x:otherwise&amp;gt;&lt;br/&gt;
&amp;lt;/x:choose&amp;gt;</value>
  </data>
  <data name="description_Xml_ForEach_Example" xml:space="preserve">
    <value>&lt;b&gt;&amp;lt;x:forEach source="${{news}}" select="//item"&amp;gt;&lt;/b&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;a href='&amp;lt;x:out select="link"/&amp;gt;'&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;x:out select="title"/&amp;gt;&amp;lt;/a&amp;gt;&lt;br/&gt;
&lt;b&gt;&amp;lt;/x:forEach&amp;gt;&lt;/b&gt;</value>
  </data>
  <data name="description_Xml_Transform_Example" xml:space="preserve">
    <value>
   &amp;lt;c:set var="xsl"&amp;gt;&lt;br/&amp;gt;&lt;br/&gt;
&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br/&gt;
&amp;lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;xsl:template match="item"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;li&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;xsl:value-of select="title"/&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/li&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/xsl:template&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;xsl:template match="/"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;ol&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;xsl:apply-templates select="//item"/&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/ol&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/xsl:template&amp;gt;&lt;br/&gt;
&lt;/xsl:stylesheet&amp;gt;&lt;br/&gt;
&lt;/c:set&amp;gt;&lt;br/&gt;
&lt;b&gt;&amp;lt;x:transform doc="${{news}}" xslt="${{xsl}}"/&amp;gt;&lt;/b&gt;&lt;br/&gt;
   </value>
  </data>
  <data name="description_Xml_Param_Example" xml:space="preserve">
    <value>&amp;lt;x:transform doc="${{news}}" xslt="${{searchXsl}}"/&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;&amp;lt;x:param name="searchParam"&amp;gt;Web Services&amp;lt;/x:param&amp;gt;&lt;/b&gt;&lt;br/&gt;
&amp;lt;/x:transform&amp;gt;</value>
  </data>
  <data name="description_Core_ForEach_Example" xml:space="preserve">
    <value>&amp;lt;c:forEach items="${{user.languages}}" var="lang" varStatus="status"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:if test="${{status.first}}"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;You speak these languages:&amp;lt;br/&amp;gt;&amp;lt;ul&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/c:if&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;li&amp;gt;&amp;lt;c:out value="${{lang}}"/&amp;gt;&amp;lt;/li&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:if test="${{status.last}}"&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/c:if&amp;gt;&lt;br/&gt;
&amp;lt;/c:forEach&amp;gt;</value>
  </data>
  <data name="description_Core_ForTokens_Example" xml:space="preserve">
    <value>&amp;lt;c:set var="users"&amp;gt;Fred,Joe,Mary&amp;lt;c:set&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:forTokens var="name" items="${{users}}" delims=","&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:out value="${{name}}"/&amp;gt;&amp;lt;br/&amp;gt;&lt;br/&gt;
&amp;lt;/c:forTokens&amp;gt;</value>
  </data>
  <data name="description_Core_Url_Example" xml:space="preserve">
    <value>&amp;lt;c:url="editProfile.do" var="profileLnk"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:param name="id" value="${{user.id}}"/&amp;gt;&lt;br/&gt;
&amp;lt;/c:url&amp;gt;&lt;br/&gt;
&amp;lt;a href='&amp;lt;c:out value="${{profileLnk}}"/&amp;gt;'&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Edit Profile&lt;br/&gt;
&amp;lt;/a&amp;gt;</value>
  </data>
  <data name="description_Core_Import_Example" xml:space="preserve">
    <value>&lt;b&gt;&amp;lt;c:import url="includes/header.aspx"&amp;gt;&lt;/b&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;c:param name="title"&amp;gt;Hello World&amp;lt;/c:param&amp;gt;&lt;br/&gt;
&lt;b&gt;&amp;lt;/c:import&amp;gt;&lt;/b&gt;</value>
  </data>
  <data name="description_Core_Redirect_Example" xml:space="preserve">
    <value>&amp;lt;c:if test="${{empty user}}"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;&amp;lt;c:redirect url="login.aspx"/&amp;gt;&lt;/b&gt;&lt;br/&gt;
&amp;lt;/c:if&amp;gt;</value>
  </data>
  <data name="description_Xml_Example" xml:space="preserve">
    <value>
&amp;lt;x:parse var="doc"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;users&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;user id="997"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;first-name&amp;gt;George&amp;lt;/first-name&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;last-name&amp;gt;Burdell&amp;lt;/last-name&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/user&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;user id="998"&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;first-name&amp;gt;Joseph&amp;lt;/first-name&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;last-name&amp;gt;Blough&amp;lt;/last-name&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/user&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/users&amp;gt;&lt;br/&gt;
&amp;lt;/x:parse&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;lt;c:set var="userId" value="${{user.id}}" scope="page"/&amp;gt;&lt;br/&gt;
&lt;br/&gt;
&amp;lt;x:set var="user" source="${{doc}}" select="//users/user[@id=$pageScope:userId]"/&amp;gt;&lt;br/&gt;
&lt;br/&gt;
Hi &amp;lt;x:out source="${{user}}" select="/first-name"/&amp;gt; !
   </value>
  </data>
  <data name="description_Sharp_Scope" xml:space="preserve">
    <value>Pushes a new tag scope on the stack. So tag level variables can be used without changes the early created variables.</value>
  </data>
  <data name="description_ExpressionLanguage_Note" xml:space="preserve">
    <value>In java dictionary and list access is done with brackets. SharpTiles deviates from this syntax. In SharpTiles access to properties, 
   list, dictionaries is done with the same '.' notation.&lt;br/&gt;
   &lt;br/&gt;
   For example:&lt;br/&gt;
   &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;map["key"][i].property&lt;/i&gt; becomes &lt;i&gt;map.key.i.property&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;
	The underlying implementation of the properties is now hidden from the view logic.
   </value>
  </data>
  <data name="expression_Header_Operator" xml:space="preserve">
    <value>Operator</value>
  </data>
  <data name="expression_Header_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="description_MathParser" xml:space="preserve">
    <value>Math</value>
  </data>
 <data name="description_AddParser" xml:space="preserve">
    <value>Addition</value>
  </data>
  <data name="description_MinusParser" xml:space="preserve">
    <value>Subtraction</value>
  </data>
  <data name="description_MultiplyParser" xml:space="preserve">
    <value>Multliplication</value>
  </data>
  <data name="description_DivideParser" xml:space="preserve">
    <value>Division</value>
  </data>
  <data name="description_ModuloParser" xml:space="preserve">
    <value>Remainder(modulo)</value>
  </data>
  <data name="description_PowerParser" xml:space="preserve">
    <value>Power</value>
  </data>
  <data name="description_StringConstantParser" xml:space="preserve">
    <value>String constant</value>
  </data>
  <data name="description_ConstantParser" xml:space="preserve">
    <value>Constant (will be interpreted as bool or decimal if possible)</value>
  </data>
  <data name="description_BracketsParser" xml:space="preserve">
    <value>Paranthesis for changing operator precedence or used as parameters in function calls</value>
  </data>
  <data name="description_NotParser" xml:space="preserve">
    <value>not</value>
  </data>
  <data name="description_LessThanParser" xml:space="preserve">
    <value>Less than</value>
  </data>
  <data name="description_GreaterThanParser" xml:space="preserve">
    <value>Greater than</value>
  </data>
  <data name="description_LessThanOrEqualParser" xml:space="preserve">
    <value>Less than or equal to</value>
  </data>
  <data name="description_GreaterThanOrEqualParser" xml:space="preserve">
    <value>Greater than or equal to</value>
  </data>
  <data name="description_EqualToParser" xml:space="preserve">
    <value>Equal to</value>
  </data>
  <data name="description_NotEqualToParser" xml:space="preserve">
    <value>Not equal to</value>
  </data>
  <data name="description_AndParser" xml:space="preserve">
    <value>Logic and right parameter lazy evaluated</value>
  </data>
  <data name="description_OrParser" xml:space="preserve">
    <value>Logic or right parameter lazy evaluated</value>
  </data>
  <data name="description_FunctionParser" xml:space="preserve">
    <value>Function call</value>
  </data>
  <data name="type_String" xml:space="preserve">
    <value>string</value>
  </data>
  <data name="type_Int32" xml:space="preserve">
    <value>integer</value>
  </data>
  <data name="type_Boolean" xml:space="preserve">
    <value>boolean</value>
  </data>
  <data name="type_Object" xml:space="preserve">
    <value>object</value>
  </data>
  <data name="type_String[]" xml:space="preserve">
    <value>string[]</value>
  </data>
  <data name="type_IEnumerable" xml:space="preserve">
    <value>IEnumerable</value>
  </data>
  <data name="function_Header_Operator" xml:space="preserve">
    <value>Function</value>
  </data>
  <data name="function_Header_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="description_LengthFunction" xml:space="preserve">
    <value>If a collection or array is passed, the size of the collection or array is
returned; If a string is passed, the number of characters in the string is
returned.</value>
  </data>
  <data name="description_ReverseFunction" xml:space="preserve">
    <value>If a collection, string or array is passed. The order of the elements will be reversed.</value>
  </data>
  <data name="description_ConcatFunction" xml:space="preserve">
    <value>Concatenates the left string with the right string.</value>
  </data>
  <data name="description_EmptyFunction" xml:space="preserve">
    <value>True if the operand is null, an empty String, empty array, empty Map, or empty List; false, otherwise.</value>
  </data>
  <data name="description_ContainsFunction" xml:space="preserve">
    <value>Returns true if substring is contained in source; false, otherwise.</value>
  </data>
  <data name="description_ContainsIgnoreCaseFunction" xml:space="preserve">
    <value>Returns true if substring is contained in source regardless of case; false,
otherwise.</value>
  </data>
  <data name="description_IndexOfFunction" xml:space="preserve">
    <value>Returns an integer representing the 0-based index within source of the first
occurrence of substring. If substring is empty, 0 is returned.</value>
  </data>
  <data name="description_StartsWithFunction" xml:space="preserve">
    <value>Returns true if source starts with the specified prefix; false, otherwise.</value>
  </data>
  <data name="description_EndsWithFunction" xml:space="preserve">
    <value>Returns true if source ends with the specified suffix; false, otherwise.</value>
  </data>
  <data name="description_ReplaceFunction" xml:space="preserve">
    <value>Replaces in source, every occurrence of beforeString with
afterString. An empty string is returned if either inputString or
beforeString is empty. If afterString is empty, all occurences of the
beforeString are removed.</value>
  </data>
  <data name="description_JoinFunction" xml:space="preserve">
    <value>Joins all elements of the parts into a single string. Separator
separates each element in the resulting string. If separator is an empty string, the elements are joined without a separator.</value>
  </data>
  <data name="description_SplitFunction" xml:space="preserve">
    <value>Splits string into a string array using the given set of delimiter characters.
The delimiter characters are not included in any returned tokens.</value>
  </data>
  <data name="description_EscapeXmlFunction" xml:space="preserve">
    <value>Escapes characters (e.g changing "&amp;lt;" to "&amp; lt;") that could be interpreted as XML (including HTML) markup.</value>
  </data>
  <data name="description_ToLowerCaseFunction" xml:space="preserve">
    <value>Converts all characters of a string to lowercase.</value>
  </data>
  <data name="description_ToUpperCaseFunction" xml:space="preserve">
    <value>Converts all characters of a string to uppercase.</value>
  </data>
  <data name="description_TrimFunction" xml:space="preserve">
    <value>Removes whitespace from both ends of a string.</value>
  </data>
  <data name="description_SubStringFunction" xml:space="preserve">
    <value>Returns a subset of source using the zero-based indices – inclusive of the
begin index, but exclusive of the end index.</value>
  </data>
  <data name="description_SubStringBeforeFunction" xml:space="preserve">
    <value>Returns the subset of source that procedes the given substring.</value>
  </data>
  <data name="description_SubStringAfterFunction" xml:space="preserve">
    <value>Returns the subset of source that succedes the given substring.</value>
  </data>
  <data name="expression_ArithmeticExpression" xml:space="preserve">
    <value>Arithmetic expressions</value>
  </data>
  <data name="expression_OtherExpression" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="expression_Comparison" xml:space="preserve">
    <value>Comparison expressions</value>
  </data>
  <data name="expression_LogicExpression" xml:space="preserve">
    <value>Boolean logic expressions</value>
  </data>
  <data name="title_Operators" xml:space="preserve">
    <value>Operators</value>
  </data>
  <data name="title_OperatorPrecedence" xml:space="preserve">
    <value>Operator precedence</value>
  </data>
  <data name="expression_Header_Priority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="tag_Header_Default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="description_Tiles_Title" xml:space="preserve">
    <value>Tiles &lt;i&gt;Tag Library&lt;/i&gt;</value>
  </data>
  <data name="description_Tiles" xml:space="preserve">
    <value>The tiles tag lib provides functionality to include defined tiles in to the page.</value>
  </data>
  <data name="description_Tiles_Insert" xml:space="preserve">
    <value>Inserts a configured tile into the page. The available tiles set is configured in a seperate config file.</value>
  </data>
  <data name="description_Tiles_Insert_Note" xml:space="preserve">
    <value>
		Unlike Java Tiles, the inserted tile uses the same model as the parent tile/page so all variables can be used directly. 
		The sharing of the same page model also makes the &lt;i&gt;&amp;lt;tiles:importAttribute/&amp;gt;&lt;/i&gt; obsolete
	</value>
  </data>
  <data name="description_Tiles_Insert_Example" xml:space="preserve">
    <value>
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;head&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;title&amp;gt;Sample&amp;lt;/title&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;/head&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;body&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;div id="menu"&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;tiles:insert name='menu'/&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;hr /&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;div id="main"&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;tiles:insert name='body'/&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;/body&amp;gt;&lt;/br&gt;
&amp;lt;/html&amp;gt;&lt;/br&gt;
    </value>
  </data>
  <data name="description_Tiles_Insert_Name" xml:space="preserve">
    <value>The name of the tile to import</value>
  </data>

  <data name="description_Html" xml:space="preserve">
    <value>The html tag lib provides a wrapper to access the &lt;a href='http://www.codeplex.com/MVCContrib/Wiki/View.aspx?title=FormHelper&amp;referringTitle=Documentation'&gt;HtmlHelper&lt;/a&gt;.</value>
  </data>
  <data name="description_Html_Note" xml:space="preserve">
    <value>The html tag lib is only available in combination with ASP.NET MVC.&lt;/br&gt;This is because the html tag lib is implemented with the HtmlHelper, which is only available in ASP.NET MVC.
   </value>
  </data>
  <data name="description_Html_ActionTag" xml:space="preserve"><value>Renders an action url.</value></data>
  
  <data name="description_Html_Action" xml:space="preserve">
    <value>Wraps te UrlHelper and HtmlHelper to make refering to controllers more easy</value>
  </data>

  <data name="description_Html_HtmlInput" xml:space="preserve">
    <value>Wraps te Input extensions</value>
  </data>

  <data name="description_Html_ActionTag_Example" xml:space="preserve">
    <value>&amp;lt;html:action action='${{Model.action}}' controller='LoginController'/&amp;gt;</value>
  </data>
  
  <data name="description_Html_ActionTag_Action" xml:space="preserve">
    <value>Action to be called on the controller</value>
  </data>
  
  <data name="description_Html_ActionTag_Controller" xml:space="preserve">
    <value>Controller to redirect to</value>
  </data>
  
  <data name="description_Html_FormTag" xml:space="preserve">
    <value>Simulates the form extensions method. A new implementation was required, because the existing form extensions writes directly to the http response.</value>
  </data>
  
  <data name="description_Html_FormTag_Example" xml:space="preserve">
    <value>
       &amp;lt;html:form action='${{Model.action}}' controller='${{Model.controller}}' method='post'&amp;gt;
       &amp;nbsp;&amp;nbsp;&lt;html:textBox name='${{Model.textBoxName}}' value='${{Model.textBoxValue}}' class='${{Model.style}}'/&amp;gt;
       &amp;lt;/html:form&amp;gt;
    </value>
  </data>
  
  <data name="description_Html_FormTag_Action" xml:space="preserve">
    <value>Name of the action used to handle the post</value>
  </data>

  <data name="description_Html_Actie" xml:space="preserve">
    <value>
    This taglib basicly is a wrapper for all extension methods on the HtmlHelper. This allows you add a tag like &lt;/br&gt;
     &lt;p&gt;
        &lt;code&gt;
        &amp;lt;html:checkBox name=&quot;rememberMe&quot; isChecked=&quot;${{Model.checkBoxValue}}&quot; class=&quot;loginform&quot;/&amp;gt; &lt;/br&gt;
        &lt;/code&gt;
    &lt;/p&gt;
    to your page. The example wraps the following method: &lt;/br&gt;
    &lt;p&gt;
        &lt;code&gt;
                   InputExtensions.CheckBox(
                    
                        &lt;i&gt;HtmlHelper&lt;/i&gt; &lt;i&gt;htmlHelper&lt;/i&gt;,
                    
                        string &lt;i&gt;name&lt;/i&gt;,
                    
                        boolean &lt;i&gt;isChecked&lt;/i&gt;,
                    
                        IDictionary&amp;lt;string, object&amp;gt; &lt;i&gt;htmlAttributes&lt;/i&gt;
                    ) : string
                 &lt;/code&gt;
    &lt;/p&gt;&lt;/br&gt;
    In a aspx page the example would look like this:&lt;p&gt;
        &lt;code&gt;
			&amp;lt;%=HtmlHelper.CheckBox(&quot;rememberMe&quot;, ViewData.Model.CheckBoxvalue, new {{class=&quot;formInput&quot;}});%&amp;gt;
	    &lt;/code&gt;
    &lt;/p&gt;&lt;/br&gt;
	SharpTiles will always look for a matching method with the least amount of parameters. The parameter names are matched on name with two exceptions,  &lt;i&gt;htmlHelkper &lt;/i&gt; and  &lt;i&gt;htmlAttributes&lt;/i&gt;
	the  &lt;i&gt;htmlHelper&lt;/i&gt; is added automaticly by the framework. The  &lt;i&gt;htmlAttributes&lt;/i&gt; is a dictionary containing key value pairs of unmatched attributes. So our example requires a
	method with name &lt;i&gt;checkBox&lt;/i&gt; and a parameter &lt;i&gt;name&lt;/i&gt; and a parameter &lt;i&gt;isChecked&lt;/i&gt;. Further more there isn't a method which takes &lt;i&gt;class&lt;/i&gt; as a parameter so this is stored in the &lt;i&gt;htmlAttributes&lt;/i&gt;. This 
	makes that the method we are looking for also required a parameters &lt;i&gt;htmlAttributes&lt;/i&gt;. SharpTiles will search for this method and makes the call.
	All parameters are evaluated by shaprtiles before being passed through the html helper.&lt;br/&gt;
	Below this introduction all wrapped methods are enumerated. A different version of your HtmlHelper might change the availability of the wrapped methods.
    </value>
  </data>

  <data name="description_Html_FormTag_Controller" xml:space="preserve">
    <value>Name of the controller to post to. If omitted the current controller is used</value>
  </data>
  
  <data name="description_Html_FormTag_Method" xml:space="preserve">
    <value>Set how this form is posted.</value>
  </data>
  
  <data name="description_Html_FormTag_Id" xml:space="preserve">
    <value>The id of the form</value>
  </data>

  <data name="description_HtmlHelperWrapperTag_Id" xml:space="preserve">
    <value>The id of the tag</value>
  </data>
  <data name="description_Html_Title" xml:space="preserve"><value>Html wrapper &lt;i&gt;Tag Library&lt;/i&gt;</value></data>
  <data name="description_Html_CheckBoxTag" xml:space="preserve"><value>Wraps the check box helper method</value></data>
  <data name="description_Html_HtmlInput" xml:space="preserve"><value>All the html helper methods</value></data>
  <data name="description_Html_CheckBoxTag_Example" xml:space="preserve"><value>&amp;lt;html:checkBox name='${{Model.checkBoxName}}' isChecked='${{Model.checkBoxValue}}' class='${{Model.style}}'/&amp;gt;</value></data>
  <data name="description_Html_HiddenTag" xml:space="preserve"><value>Wraps the hidden helper method</value></data>
  <data name="description_Html_HiddenTag_Example" xml:space="preserve"><value>&amp;lt;html:hidden name='${{Model.hiddenName}}' value='${{Model.hiddenValue}}' class='${{Model.style}}'/&amp;gt;</value></data>
  <data name="description_Html_PasswordTag" xml:space="preserve"><value>Wraps the password helper method</value></data>
  <data name="description_Html_PasswordTag_Example" xml:space="preserve"><value>&amp;lt;html:password name="${{Model.passwordName}}" value="${{Model.passwordValue}}" class="${{Model.style}}"/&amp;gt;</value></data>
  <data name="description_Html_RadioButtonTag" xml:space="preserve"><value>Wraps the radion button helper method</value></data>
  <data name="description_Html_RadioButtonTag_Example" xml:space="preserve"><value>&amp;lt;html:radioButton name="${{Model.radioButtonName}}" value="${{Model.radioButtonValue}}" class="${{Model.style}}"/&amp;gt;</value></data>
  <data name="description_Html_TextBoxTag" xml:space="preserve"><value>Wraps the text box helper method</value></data>
  <data name="description_Html_TextBoxTag_Example" xml:space="preserve"><value>&amp;lt;html:textBox name='${{Model.textBoxName}}' value='${{Model.textBoxValue}}' class='${{Model.style}}"/></value></data>
  <data name="description_Html_DropDownListTag" xml:space="preserve"><value>Wraps the drop down list helper method</value></data>
  <data name="description_Html_DropDownListTag_Example" xml:space="preserve"><value>&amp;lt;html:dropDownList name='${{Model.dropDownListName}}' selectList='${{Model.selectList}}"/&amp;gt;</value></data>
  <data name="description_Html_ListBoxTag" xml:space="preserve"><value>Wraps the list box helper method</value></data>
  <data name="description_Html_ListBoxTag_Example" xml:space="preserve"><value>&amp;lt;html:listBox name='${{Model.listBoxName}}' selectList='${{Model.mutliList}}'/&amp;gt;</value></data>
  <data name="description_Html_TextAreaTag" xml:space="preserve"><value>Wraps the textarea box helper method</value></data>
  <data name="description_Html_TextAreaTag_Example" xml:space="preserve"><value>&amp;lt;html:textArea name='${{Model.textAreaName}}' value='${{Model.textAreaValue}}' columns='${{Model.columns}}' rows='${{Model.rows}}' class='htmlEditor'/&amp;gt;</value></data>
  <data name="description_Html_ValidationMessageTag" xml:space="preserve"><value>Wraps the validation message helper</value></data>
  <data name="description_Html_ValidationMessageTag_Example" xml:space="preserve"><value>&amp;lt;html:validationMessage modelName='${{Model.modelName}}' validationMessage='${{Model.validationMessage}}'/&amp;gt;</value></data>
  <data name="description_Html_ValidationSummaryTag" xml:space="preserve"><value>The name of the tile to import</value></data>
  <data name="description_Html_ValidationSummaryTag_Example" xml:space="preserve"><value>&amp;lt;html:validationSummary message='msg' class='errorReport'/&amp;gt;</value></data>
  <data name="type_IDictionary`2" xml:space="preserve"><value>IDictionary&amp;lt;string, object&amp;gt;</value></data>
  <data name="type_IEnumerable`1" xml:space="preserve"><value>IEnumerable&amp;lt;SelectListItem&amp;gt;</value></data>
  <data name="type_HtmlHelper" xml:space="preserve"><value>&lt;i&gt;HtmlHelper&lt;/i&gt;</value></data>
  <data name="description_Tiles_InsertTemplate" xml:space="preserve">
    <value>Allows pages to enter a masterpage without explictely defining it in the tiles.xml configuration file.&lt;br/&gt;&lt;i&gt;Contributed by Ronald Dehuysser&lt;/i&gt;</value>
  </data>
  <data name="description_Tiles_InsertTemplate_Example" xml:space="preserve">
    <value>&amp;lt;tiles:insertTemplate template="/Views/Shared/Masterpage.tile"&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;tiles:putAttribute name="title" value="Sample Title"/&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;tiles:putAttribute name="Top Navigation" value="/Views/Shared/navigation.tile"/&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;tiles:putAttribute name="body"&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;div id="main"&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;p&amp;gt;Dit is de body&amp;lt;/p&amp;gt;&lt;/br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/div&amp;gt;&lt;/br&gt;
&amp;lt;/tiles:insertTemplate&amp;gt;&lt;/br&gt;</value>
  </data>
  <data name="description_Tiles_InsertTemplate_Template" xml:space="preserve">
    <value>Defines the template that will be used to display the current page.</value>
  </data>
  <data name="description_Tiles_PutAttribute" xml:space="preserve">
    <value>This tag allows attibutes to be add to the current page.&lt;br/&gt;&lt;i&gt;Contributed by Ronald Dehuysser&lt;/i&gt;</value>
  </data>
  <data name="description_Tiles_PutAttribute_Example" xml:space="preserve">
    <value>See the example for the &amp;lt;tiles:insertTemplate /&amp;gt; tag.</value>
  </data>
  <data name="description_Tiles_PutAttribute_Name" xml:space="preserve">
    <value>This attribute defines the name of the current tile attribute and must match one of the Tiles insert names in the masterpage so it can be imported.</value>
  </data>
  <data name="description_Tiles_PutAttribute_Value" xml:space="preserve">
    <value>The value of the attribute to be imported. This value is not required and can be provided in the body of the tag. If provided, it can be a plain string value or a url. If the value starts with a '/' it is used as a url and the file provided by the url is imported.</value>
  </data>
  <data name="description_Tiles_PutAttribute_TileType" xml:space="preserve">
    <value>Like tiles defined in the tiles.xml The tile factory will guess the tile type (template or string). You can override the guessing by defining the type</value>
  </data>
  <data name="description_Tiles_Insert_Mandatory" xml:space="preserve">
    <value>If this attribute is set to false and the attribute specified by the name does not exist then nothing will be rendered. The default value, true, will raise an error.</value>
  </data>

</root>