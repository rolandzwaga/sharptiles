<?xml version="1.0" encoding="utf-8"?>

<project name="SharpTiles" default="help">

  <property name="nant.settings.currentframework" value="net-3.5" />
  <property name="framework.version" value="v3.5" />

  <property name="release.version" value="6.0-RC1" />
  
  <description>
    This is the main Nant build file for the SharpTiles Project.
  </description>
  
  <property name="debug" value="true" /> 
  <property name="optimize" value="true" /> 
  <property name="warn.as.error" value="true" /> 
  
  <!-- ********************************************************************************************************************* -->

  <!-- display help" -->
  <target name="help">
    <echo message="${project::get-name()}: Build file help by target :"/>
    <echo message=""/>
    <echo message="all            - performs runs clean, build, test, documents and deploy"/>
    <echo message="build          - builds the solutions and all sub projects"/>
    <echo message="clean          - cleans the build, test data and the coverage figures of the project"/>
    <echo message="test           - tests the solutions and all sub projects"/>
    <echo message="coverage       - calculates the coverage" />
    <echo message="documentation  - builds the tag lib documentation" />
    <echo message="lgpl           - guard lgpl header" /> 
    <ecgi message="distribution   - makes a distribution"/>
  </target>


  <!-- ** main tasks ******************************************************************************************************************* -->

  <target name="_initfilestructure" description="- initialized the file structure for the build process.">
	  <mkdir dir="build" /> 
	  <mkdir dir="build/testsources" /> 
	  <mkdir dir="build/flatsources" /> 
	  <mkdir dir="build/results" /> 
	  <mkdir dir="build/results" /> 
	  <mkdir dir="build/work" /> 
	  <mkdir dir="build/nunit" /> 
	  <mkdir dir="build/coverage" /> 
	  <mkdir dir="build/documentation" />
	  <mkdir dir="build/dist" /> 
  </target>
  
  <target name="clean">
	   <delete dir="build"/> 
  </target>
  
  <target name="lgpl">
	<loadfile file="SharpTiles/FILE.HEADER" property="lgpl.header" />
	<foreach item="File" property="file.name">
		  <in>
		   <items basedir="SharpTiles">
			  <include name="**/*.cs" />
         <!-- exclude name="**/*.cs" /-->
			</items>
		  </in>
		  <do>
				<loadfile file="${file.name}" property="file.content" />
				<property name="file.requires.lgpl" value="${not(string::contains(file.content, lgpl.header))}" />
				<call target="_add_lgpl_to_file" if="${file.requires.lgpl}"/> 
		  </do> 
	</foreach>
  </target>
  
  <target name="_remove_lgpl_to_file">
	<echo message="Removing LGPL to ${file.name}"/> 
	<property name="decorated.file.content" value="${string::replace(file.content, lgpl.header, '')}"/>
	<property name="decorated.file.content" value="${string::trim(decorated.file.content)}"/>
	<echo message="${decorated.file.content}"  file="${file.name}" append="false"/>
  </target>
  
  <target name="_add_lgpl_to_file">
	<echo message="Adding LGPL to ${file.name}"/> 
	<property name="decorated.file.content" value="${lgpl.header}${file.content}"/>
	<property name="decorated.file.content" value="${string::trim(decorated.file.content)}"/>
	<echo message="${decorated.file.content}" file="${file.name}" append="false"/>
  </target>
  


  <target name="_flatcopy" depends="_initfilestructure" description="- creates a flatcopy of the sources.">
	   <copy todir="build\flatsources" flatten="false">
		  <fileset basedir="SharpTiles">
		  <include name="AssemblyInfo.cs" /> 
		  <include name="org.SharpTiles*/**.cs" /> 
		  <include name="org.SharpTiles*/**.xml" /> 
		  <include name="org.SharpTiles*/**.resources" /> 
		  <include name="org.SharpTiles*/**.resx" /> 
		  <include name="org.SharpTiles*/**.htm*" /> 
		  <include name="org.SharpTiles*/**.css" /> 
		  <include name="org.SharpTiles*/**.gif" /> 
		  <exclude name="org.SharpTiles*Test/**" /> 
		  <exclude  name="org.SharpTiles*/**/AssemblyInfo.cs" />
		  </fileset>
		</copy>
  </target>


  <target name="build" depends="_flatcopy" description="- builds the project.">
	  <csc target="library" warnaserror="${warn.as.error}" output="build/work/org.SharpTiles.dll" debug="${debug}" optimize="${optimize}">
		<sources>
			<include name="build/flatsources/**.cs" /> 
		</sources>
		<references>
			<include name="library/*.dll" /> 
			<include name="library/Monorail/*.dll" />
			<!-- exclude name="library/nunit*.dll" /-->
			<exclude name="TestDriven*.dll" />
		</references>
	  </csc>
	  <csc target="library" warnaserror="true" output="build/dist/org.SharpTiles.dll" debug="false" optimize="true">
		<sources>
			<include name="build/flatsources/**.cs" /> 
		</sources>
		<references>
			<include name="library/*.dll" /> 
			<include name="library/Monorail/*.dll" />
			<!-- exclude name="library/nunit*.dll" /-->
		</references>
	  </csc>
	  <copy todir="Tutorials/distribution" file="build/dist/org.SharpTiles.dll"/>
  </target>
  
  <!-- ** test tasks ******************************************************************************************************************* -->

   <target name="_copytests" depends="_initfilestructure" description="- creates a copy of the tests.">
	   <copy todir="build\testsources" flatten="false">
		  <fileset basedir="SharpTiles">
			  <include name="AssemblyInfo.cs" /> 
			  <include name="org.SharpTiles*Test/**.cs" /> 
			  <exclude  name="org.SharpTiles*Test/**/AssemblyInfo.cs" />
		  </fileset>
		</copy>
  </target>

  <target name="_buildtests" depends="_copytests" description="- builds the tests classes of the project.">
	   <foreach item="Folder" property="current.item">
			<in>
				<items basedir="build/testsources/">
					<include name="org.SharpTiles*Test" /> 
				</items>
			</in>
			<do>
				  <property name="filename" value="${path::get-file-name(current.item)}" /> 
				  <echo message="At ${filename}"/>
				  <mkdir dir="build/work/${filename}" /> 
			      <csc target="library" warnaserror="${warn.as.error}" output="build/work/${filename}/${filename}.dll" debug="${debug}" optimize="${optimize}">
					  <sources>
						  <include name="build/testsources/${filename}/**.cs" /> 
					  </sources>
					  <references>
						<include name="library/*.dll" /> 
						<include name="library/Monorail/*.dll" />
						<include name="build/work/org.SharpTiles.dll" /> 
					  </references>
					  <resources>
						<include name="SharpTiles/${filename}/Configuration/tiles.xml" /> 
						<include name="SharpTiles/${filename}/**mvc_*.htm*" /> 
						<include name="SharpTiles/${filename}/**embedded_*.htm*" /> 
						<include name="SharpTiles/${filename}/**embedded_*.resx" /> 
						<include name="SharpTiles/${filename}/**embedded_*.resources" /> 
						<exclude name="SharpTiles/${filename}/bin/**" /> 
					  </resources>
				 </csc>
				 <copy todir="build/work/${filename}" flatten="false">
					  <fileset basedir="SharpTiles/${filename}">
						  <include name="**.xml" /> 
						  <include name="**.xsl" /> 
						  <include name="**.htm*" /> 
						  <include name="**.resources" /> 
						  <include name="**.resources" /> 
						  <include name="**.resx" /> 
						  <include name="**.txt" />
						  <exclude name="**/bin/*" />
						  <exclude name="Configuration/tiles.xml" />
						  <exclude name="**mvc_*.htm*" /> 
						  <exclude name="**embedded_*.htm*" /> 
						  <exclude name="**embedded_*.resx" /> 
						  <exclude name="**embedded_*.resources" /> 
					  </fileset>
				  </copy>
				  <copy todir="build/work/${filename}" flatten="true">
					  <fileset basedir="library">
						<include name="*" /> 
					  	<include name="Monorail/*.dll" />
					</fileset>
				  </copy>
				  <copy todir="build/work/${filename}" flatten="false" file="build/work/org.SharpTiles.dll"/> 
			</do>			  
	  </foreach>
	  <copy todir="build/work/org.SharpTiles.Documentation.Test" flatten="false" verbose="true">
		  <fileset basedir="SharpTiles/org.SharpTiles.Documentation">
			  <include name="*/*.resources" /> 
			  <include name="*/*.resx" /> 
		  </fileset>
	  </copy>
				  
  </target>

  <target name="test" depends="_buildtests" description="- builds the tests classes of the project.">
       <foreach item="Folder" property="current.item">
			<in>
				<items basedir="build/work/">
					<include name="org.SharpTiles*Test" /> 
				</items>
			</in>
			<do>
			    <property name="filename" value="${path::get-file-name(current.item)}" /> 
			  
				<exec program="tools\NCover\NCover.Console.exe">
				  <arg value="//w &quot;build/work/${filename}/&quot;" />
				  <arg value="//a &quot;org.SharpTiles&quot;" />
				  <arg value="//x &quot;build/results/${filename}.coverage.xml&quot;" />
				  <arg value="//l &quot;build/results/${filename}.ncover.log&quot;" />
				  <arg value="//reg" />
				  <!--arg value="//v" /-->
				  <arg value="&quot;tools\NUnit\nunit-console.exe&quot;" />
				  <arg value="${filename}.dll" />
				  <arg value="/xml=../../../build/results/${filename}.results.xml" />
				  <arg value="/labels"/>
				  <arg value="/nologo"/>
				</exec>  
			</do>
	  </foreach>
	  <call target="_testreport" />
	  <call target="coverage" />
  </target>

  <target name="_testreport" description="- builds a test report of the build.">
   <nunit2report format="NoFrames" todir="build/nunit">
		<fileset basedir="build/results">
			<include name="*.results.xml" /> 
		</fileset>
	</nunit2report>
  </target>

  <target name="coverage" description="- builds a test report of the build.">
	 <ncoverexplorer program="tools\NCoverExplorer\ncoverexplorer.console.exe" 
					 projectName="org.SharpTiles.dll" 
					 reportType="4" 
					 outputDir="build/coverage" 
					 xmlReportName="CoverageReport.xml" 
					 htmlReportName="CoverageReport.html" 
                                         satisfactoryCoverage="86" 
					 failMinimum="true" 
					 sort="CoveragePercentageAscending">
		<fileset>
			<include name="build/results/*.coverage.xml" /> 
		</fileset>
	</ncoverexplorer>
  </target>
  
  
  <!-- ** documentations ******************************************************************************************************************* -->
  
  <target name="documentation" description="- builds the tag lib documentation.">
	<csc target="winexe" warnaserror="${warn.as.error}" output="build/work/org.SharpTiles.exe" debug="${debug}" optimize="${optimize}">
		<sources>
			<include name="build/flatsources/**.cs" /> 
		</sources>
		<references>
			<include name="library/*.dll" /> 
			<include name="library/Monorail/*.dll" /> 
			<!--exclude name="library/nunit*.dll" /--> 
			<exclude name="library/TestDriven*.dll" /> 
		</references>
	  </csc>
	  <exec program="build/work/org.SharpTiles.exe">
		  <arg value="&quot;build/flatsources/org.SharpTiles.Documentation/templates&quot;" />
		  <arg value="&quot;build/documentation&quot;" />
	  </exec>  
  </target>

  <!-- ** distributions ******************************************************************************************************************* -->

  <target name="zip" description="- zips a distribution">
	<zip zipfile="build/org.SharpTiles-${release.version}-bin.zip" ziplevel="9">
		<fileset basedir="build">
			<include name="nunit/*" /> 
			<include name="coverage/*" /> 
			<include name="documentation/*" /> 
			<include name="dist/*" /> 
		</fileset>
	</zip>
  </target>
  
  <target name="zipwithsources" description="- zips a distribution">
	<zip zipfile="build/org.SharpTiles-${release.version}-src.zip" ziplevel="9">
		<fileset basedir=".">
			<include name="**/*" /> 
			<exclude name="build/**/*" /> 
			<exclude name="**/_Resharper*/**" /> 
		</fileset>
	</zip>
  </target>
  
 <target name="ziptutorials" description="- zips a distribution">
	<zip zipfile="build/org.SharpTiles-${release.version}-tutorials.zip" ziplevel="9">
		<fileset basedir="Tutorials">
			<include name="**/*" /> 
			<exclude name="build/**/*" /> 
			<exclude name="**/_Resharper*/**" /> 
		</fileset>
	</zip>
  </target>
  

  <!-- ** combinations ******************************************************************************************************************* -->

  
  <target name="all" description="- performs runs clean, build, test, documents and deploy">
	<call target="clean" />
	<call target="lgpl" />
	<call target="build" />
	<call target="test" />
	<call target="documentation" />
  </target>

  <target name="distribution" description="- performs runs clean, build, documents and makes a distribution">
	<call target="all" />
	<call target="zip" />
	<call target="zipwithsources" />
	<call target="ziptutorials" />
  </target>
  
</project>
